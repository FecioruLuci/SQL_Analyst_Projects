DROP TABLE IF EXISTS golddimproducts
CREATE TABLE golddimproducts (
product_key	INT PRIMARY KEY,
product_id	INT,
product_number	VARCHAR(25),
product_name	VARCHAR(50),
category_id	VARCHAR(10),
category	VARCHAR(25),
subcategory	VARCHAR(25),
maintenance	VARCHAR(10),
cost	INT,
product_line	VARCHAR(25),	
start_date	DATE
);

CREATE table golddimcustomers(
customer_key	INT PRIMARY KEY,
customer_id		INT,
customer_number	VARCHAR(25),
first_name	VARCHAR(25),
last_name	VARCHAR(25),
country	VARCHAR(25),
marital_status	VARCHAR(25),
gender	VARCHAR(25),
birthdate	DATE,
create_date	DATE
);

CREATE TABLE goldfactsales(
order_number	VARCHAR(25),
product_key	INT,
customer_key	INT,
order_date	DATE,
shipping_date	DATE,
due_date	DATE,
sales_amount	INT,
quantity	INT,
price	INT
)

-- Explore all the countries all the customers come from

SELECT
	DISTINCT country
FROM golddimcustomers

-- Explore all categories "The major diviisions"

SELECT
	DISTINCT category,
	subcategory,
	product_name
FROM golddimproducts
ORDER BY category;

-- Find the date of the first and last order

SELECT 
	MIN(order_date) as first_order,
	MAX(order_date) as last_order
FROM goldfactsales

-- How many years of sales are avaible

SELECT
	EXTRACT(YEAR FROM MAX(order_date)) - EXTRACT(YEAR FROM MIN(order_date)) as year_diff
FROM goldfactsales;

-- Find the youngest and the oldest customer

SELECT 
	AGE(CURRENT_DATE, MAX(birthdate)) as youngest,
	AGE(CURRENT_DATE, MIN(birthdate)) as oldest
FROM golddimcustomers;

-- Find the total sales

SELECT 
	SUM(sales_amount) as total_sales
FROM goldfactsales;

-- Find how many items are sold

SELECT
	COUNT(shipping_date) as items_sold
FROM goldfactsales;

-- Find the average selling price

SELECT
	ROUND(AVG(price),1) as avg_price
FROM goldfactsales;

-- Find the toal number of orders

SELECT 
	COUNT(order_number) as total_orders
FROM goldfactsales;

-- Find the total number of products

SELECT 
	COUNT(product_number) as total_number_products
FROM golddimproducts;

-- Find the total number of customers

SELECT
	COUNT(customer_number) as total_customers
FROM golddimcustomers;

-- Find the total number of customers that has placed an order

SELECT 
	COUNT(DISTINCT gs.customer_key)
FROM golddimcustomers as gc
JOIN goldfactsales as gs
ON gc.customer_key = gs.customer_key

-- Make a query to show total number of customers and total number of products

SELECT 
	'Products' as Typee, COUNT(product_number) as total_number_products
FROM golddimproducts
UNION ALL
SELECT
	'Customers' as Typee, COUNT(customer_number) as total_customers
FROM golddimcustomers;

-- Find total customers by countries

SELECT
	COUNT(customer_id) as total_cust,
	country
FROM golddimcustomers
GROUP BY country;

-- Find total customers by gender

SELECT
	COUNT(customer_id) as total_cust,
	gender
FROM golddimcustomers
GROUP BY gender;

-- Find total products by category

SELECT
	COUNT(product_id) as total_prods,
	category
FROM golddimproducts
GROUP BY category;

-- What is the average costs in each category

SELECT 
	ROUND(AVG(cost),1) as averagee,
	category
FROM golddimproducts
GROUP BY category;

-- What is the total revenue generated by each category

SELECT
	SUM(sales_amount) as total_rev,
	category
FROM goldfactsales as gs
LEFT JOIN golddimproducts as gp
ON gp.product_key = gs.product_key
GROUP BY category

-- Find total revenue generated by each customer

SELECT
	SUM(sales_amount) as total_rev,
	gc.customer_key
FROM goldfactsales as gs
LEFT JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
GROUP BY gc.customer_key
ORDER BY gc.customer_key ASC;

-- What is the distribution of sold items across countries

SELECT
	COUNT(quantity) as counter,
	gc.country
FROM goldfactsales as gs
JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
GROUP BY gc.country;

-- Which 5 produts worst-performing products in terms of sales

WITH table1
AS
(
SELECT 
	gp.product_name,
	SUM(gs.sales_amount) as total_rev
FROM goldfactsales as gs
LEFT JOIN golddimproducts as gp
ON gs.product_key = gp.product_key
GROUP BY gp.product_name
),

table2
AS
(
SELECT 
	table1.product_name,
	table1.total_rev,
	RANK () OVER(ORDER BY table1.total_rev ASC) as ranking
FROM table1
)

SELECT 
	table2.product_name,
	table2.total_rev,
	table2.ranking
FROM table2
WHERE ranking <= 5;

-- Find the top 10 customers who have generated the highest revenue

SELECT
	gs.customer_key,
	SUM(gs.sales_amount)
FROM goldfactsales as gs
LEFT JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
GROUP BY 1
ORDER BY SUM(gs.sales_amount) DESC
LIMIT 10
-- Find the 3 customers with the fewers orders placed

SELECT
	gs.customer_key,
	gc.first_name,
	gc.last_name,
	COUNT(DISTINCT gs.order_number) as total_orders
FROM goldfactsales as gs
LEFT JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
GROUP BY 1,2,3
ORDER BY 4 ASC;

-- Analyze the sales performance over time

SELECT
	order_date,
	SUM(sales_amount) as total_sales
FROM goldfactsales
GROUP BY 1
ORDER BY 1 ASC;

-- Analyze the sales performance and number of customers over years

SELECT 
	EXTRACT(YEAR FROM order_date) as yearr,
	SUM(sales_amount) as total_sales,
	COUNT(DISTINCT customer_key) as total_cust
FROM goldfactsales
GROUP BY 1
ORDER BY 1 ASC;

-- Calculate the total sales for each month
-- Calculate the running total sales over time

SELECT 
	total_sales,
	yearr,
	monthh,
	SUM(total_sales) OVER(PARTITION BY yearr,monthh ORDER BY yearr,monthh ASC)
FROM(
SELECT
	SUM(sales_amount) as total_sales,
	EXTRACT(YEAR FROM order_date) as yearr,
	EXTRACT(MONTH FROM order_date) as monthh
FROM goldfactsales
GROUP BY 2,3
ORDER BY 2,3 ASC
)t;

-- Analyze the yearly performance of products by comapring each product's sales to both its average sales performance and the previous year's sale

WITH table1
AS
(
SELECT
	EXTRACT(YEAR FROM order_date) as year_date,
	gp.product_name as namee,
	SUM(sales_amount) as total_sales
FROM goldfactsales as gs
LEFT JOIN golddimproducts as gp
ON gs.product_key = gp.product_key
GROUP BY 1,2
)

SELECT
	year_date,
	namee,
	total_sales,
	LAG(total_sales) OVER(PARTITION BY namee ORDER BY year_date) as last_year_total_sale,
	total_sales - LAG(total_sales) OVER(PARTITION BY namee ORDER BY year_date) as last_year_total_sale_diff,
	ROUND(AVG(total_sales) OVER(PARTITION BY namee)) as average,
	total_sales - ROUND(AVG(total_sales) OVER(PARTITION BY namee)) as avg_difference
FROM table1
ORDER BY 2,1;

-- Which category contribute the most to overall sales
WITH table1
AS
(
SELECT
	gp.category,
	SUM(gs.sales_amount) as total_sales
FROM goldfactsales as gs
LEFT JOIN golddimproducts as gp
ON gs.product_key = gp.product_key
GROUP BY 1
)

SELECT
	table1.category,
	table1.total_sales,
	SUM(table1.total_sales) OVER(),
	CONCAT(ROUND(table1.total_sales / SUM(table1.total_sales) OVER() * 100,1), '%') as percentage
FROM table1;

-- Segment products into cost ranges and count how many products fall into each segment
WITH table1
AS
(
SELECT
	product_name,
	product_key,
	cost,
	CASE
	WHEN cost < 500 THEN 'LOW'
	WHEN cost > 500 AND cost < 1000 THEN 'MEDIUM'
	ELSE 'HIGH'
	END AS segment
FROM golddimproducts
)

SELECT
	segment,
	COUNT(product_key)
FROM table1
GROUP BY 1;

-- Group customers into three segments based on their spending behavior 
-- VIP: at least 12 months of history and spending more than 5000$
-- Regular : at least 12 months of history and spending less than 5000$
-- New: lifespan less than 12 months
-- Select the total number of customers for each group

SELECT
	typee,
	COUNT(*)
FROM(
SELECT 
	gs.customer_key,
	MIN(gs.order_date) as date_min,
	MAX(gs.order_date) as date_max,
	SUM(gs.price) as total_spending,
	CASE
	WHEN MAX(gs.order_date) - INTERVAL '12 MONTH' > MIN(gs.order_date) AND SUM(gs.price) > 5000 THEN 'VIP'
	WHEN MAX(gs.order_date) - INTERVAL '12 MONTH' > MIN(gs.order_date) AND SUM(gs.price) < 5000 THEN 'REGULAR'
	ELSE 'NEW'
	END AS typee
FROM goldfactsales as gs
LEFT JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
GROUP BY 1
)
GROUP BY typee;

-- Gathers essential fields such as names, ages, transaction details, segments(VIP,Regular,New) and age groups, total orders, total sales, 
-- total quantity purchased, lifespan(in months), recency(months since last order), average order value, average monthly spend
WITh table1 
AS
(
SELECT
	gs.order_number,
	gs.product_key,
	gs.sales_amount,
	gs.quantity,
	gs.customer_key,
	gs.order_date,
	gs.shipping_date,
	gs.due_date,
	gc.birthdate,
	gc.customer_number,
	CONCAT(gc.first_name, ' ', gc.last_name) as cust_name,
	EXTRACT(YEAR FROM AGE(CURRENT_DATE, gc.birthdate)) as cust_age
FROM goldfactsales as gs 
LEFT JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
WHERE birthdate IS NOT NULL
),
table2
AS
(
SELECT
	customer_key,
	customer_number,
	cust_name,
	cust_age,
	MAX(order_date) as last_order,
	SUM(sales_amount) as total_sales,
	COUNT(DISTINCT order_number) as total_orders,
	SUM(quantity) as total_quantity,
	EXTRACT(YEAR FROM MAX(order_date)) * 12 + EXTRACT(MONTH FROM MAX(order_date)) - EXTRACT(YEAR FROM MIN(order_date)) * 12 - EXTRACT(MONTH FROM MIN(order_date)) as lifespan
FROM table1
GROUP BY 1,2,3,4
ORDER BY 1 ASC
)
SELECT
	customer_key,
	customer_number,
	cust_name,
	cust_age,
	total_sales,
	total_orders,
	total_quantity,
	lifespan,
	CASE
	WHEN lifespan >= 12 AND total_sales > 5000 THEN 'VIP'
	WHEN lifespan >= 12 AND total_sales < 5000 THEN 'REGULAR'
	ELSE 'NEW'
	END AS typee,
	CASE
	WHEN cust_age < 25 THEN 'YOUNG'
	WHEN cust_age > 25 AND cust_age < 40 THEN 'ADULT'
	ELSE 'OLD'
	END AS typee2,
	(EXTRACT(YEAR FROM CURRENT_DATE) * 12 + EXTRACT(MONTH FROM CURRENT_DATE)) - 
	(EXTRACT(YEAR FROM last_order) * 12 + EXTRACT(MONTH FROM last_order)) as recency,
	(total_sales/total_orders) as avg_order_value,
	total_sales / 12 as mothly_spend
FROM table2