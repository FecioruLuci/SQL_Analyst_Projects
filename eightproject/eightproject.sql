DROP TABLE IF EXISTS golddimproducts
CREATE TABLE golddimproducts (
product_key	INT PRIMARY KEY,
product_id	INT,
product_number	VARCHAR(25),
product_name	VARCHAR(50),
category_id	VARCHAR(10),
category	VARCHAR(25),
subcategory	VARCHAR(25),
maintenance	VARCHAR(10),
cost	INT,
product_line	VARCHAR(25),	
start_date	DATE
);

CREATE table golddimcustomers(
customer_key	INT PRIMARY KEY,
customer_id		INT,
customer_number	VARCHAR(25),
first_name	VARCHAR(25),
last_name	VARCHAR(25),
country	VARCHAR(25),
marital_status	VARCHAR(25),
gender	VARCHAR(25),
birthdate	DATE,
create_date	DATE
);

CREATE TABLE goldfactsales(
order_number	VARCHAR(25),
product_key	INT,
customer_key	INT,
order_date	DATE,
shipping_date	DATE,
due_date	DATE,
sales_amount	INT,
quantity	INT,
price	INT
)

-- Explore all the countries all the customers come from

SELECT
	DISTINCT country
FROM golddimcustomers

-- Explore all categories "The major diviisions"

SELECT
	DISTINCT category,
	subcategory,
	product_name
FROM golddimproducts
ORDER BY category;

-- Find the date of the first and last order

SELECT 
	MIN(order_date) as first_order,
	MAX(order_date) as last_order
FROM goldfactsales

-- How many years of sales are avaible

SELECT
	EXTRACT(YEAR FROM MAX(order_date)) - EXTRACT(YEAR FROM MIN(order_date)) as year_diff
FROM goldfactsales;

-- Find the youngest and the oldest customer

SELECT 
	AGE(CURRENT_DATE, MAX(birthdate)) as youngest,
	AGE(CURRENT_DATE, MIN(birthdate)) as oldest
FROM golddimcustomers;

-- Find the total sales

SELECT 
	SUM(sales_amount) as total_sales
FROM goldfactsales;

-- Find how many items are sold

SELECT
	COUNT(shipping_date) as items_sold
FROM goldfactsales;

-- Find the average selling price

SELECT
	ROUND(AVG(price),1) as avg_price
FROM goldfactsales;

-- Find the toal number of orders

SELECT 
	COUNT(order_number) as total_orders
FROM goldfactsales;

-- Find the total number of products

SELECT 
	COUNT(product_number) as total_number_products
FROM golddimproducts;

-- Find the total number of customers

SELECT
	COUNT(customer_number) as total_customers
FROM golddimcustomers;

-- Find the total number of customers that has placed an order

SELECT 
	COUNT(DISTINCT gs.customer_key)
FROM golddimcustomers as gc
JOIN goldfactsales as gs
ON gc.customer_key = gs.customer_key

-- Make a query to show total number of customers and total number of products

SELECT 
	'Products' as Typee, COUNT(product_number) as total_number_products
FROM golddimproducts
UNION ALL
SELECT
	'Customers' as Typee, COUNT(customer_number) as total_customers
FROM golddimcustomers;

-- Find total customers by countries

SELECT
	COUNT(customer_id) as total_cust,
	country
FROM golddimcustomers
GROUP BY country;

-- Find total customers by gender

SELECT
	COUNT(customer_id) as total_cust,
	gender
FROM golddimcustomers
GROUP BY gender;

-- Find total products by category

SELECT
	COUNT(product_id) as total_prods,
	category
FROM golddimproducts
GROUP BY category;

-- What is the average costs in each category

SELECT 
	ROUND(AVG(cost),1) as averagee,
	category
FROM golddimproducts
GROUP BY category;

-- What is the total revenue generated by each category

SELECT
	SUM(sales_amount) as total_rev,
	category
FROM goldfactsales as gs
LEFT JOIN golddimproducts as gp
ON gp.product_key = gs.product_key
GROUP BY category

-- Find total revenue generated by each customer

SELECT
	SUM(sales_amount) as total_rev,
	gc.customer_key
FROM goldfactsales as gs
LEFT JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
GROUP BY gc.customer_key
ORDER BY gc.customer_key ASC;

-- What is the distribution of sold items across countries

SELECT
	COUNT(quantity) as counter,
	gc.country
FROM goldfactsales as gs
JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
GROUP BY gc.country;

-- Which 5 produts worst-performing products in terms of sales

WITH table1
AS
(
SELECT 
	gp.product_name,
	SUM(gs.sales_amount) as total_rev
FROM goldfactsales as gs
LEFT JOIN golddimproducts as gp
ON gs.product_key = gp.product_key
GROUP BY gp.product_name
),

table2
AS
(
SELECT 
	table1.product_name,
	table1.total_rev,
	RANK () OVER(ORDER BY table1.total_rev ASC) as ranking
FROM table1
)

SELECT 
	table2.product_name,
	table2.total_rev,
	table2.ranking
FROM table2
WHERE ranking <= 5;

-- Find the top 10 customers who have generated the highest revenue

SELECT
	gs.customer_key,
	SUM(gs.sales_amount)
FROM goldfactsales as gs
LEFT JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
GROUP BY 1
ORDER BY SUM(gs.sales_amount) DESC
LIMIT 10
-- Find the 3 customers with the fewers orders placed

SELECT
	gs.customer_key,
	gc.first_name,
	gc.last_name,
	COUNT(DISTINCT gs.order_number) as total_orders
FROM goldfactsales as gs
LEFT JOIN golddimcustomers as gc
ON gs.customer_key = gc.customer_key
GROUP BY 1,2,3
ORDER BY 4 ASC

	